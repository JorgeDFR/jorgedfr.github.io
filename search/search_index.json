{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jorge Diogo Ribeiro Personal Webpage","text":""},{"location":"#identifiers","title":"Identifiers","text":"<ul> <li>Ci\u00eanciaVITAE: E415-F9DE-95FC</li> <li>ORCiD: 0009-0008-9373-982X</li> <li>AuthenticusID: R-00M-0N0</li> <li>Google Scholar: xp6I4DMAAAAJ&amp;hl</li> <li>Scopus Author ID: 59761532800</li> <li>Researcher ID: NTQ-5036-2025</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>@jorgedfr (GitHub)</li> <li>@jorgedfr (GitLab)</li> <li>@jorge.d.ribeiro (GitLab INESC TEC)</li> <li>LinkedIn</li> <li>ResearchGate</li> <li>YouTube</li> </ul>"},{"location":"#contacts","title":"Contacts","text":"<p>Jorge Diogo Ribeiro</p> <p>Robotics Researcher at CRIIS - Centre for Robotics in Industry and Intelligent Systems from INESC TEC - Institute for Systems and Computer Engineering, Technology and Science, 4200-465 Porto, Portugal</p> <ul> <li>Mail: jorge.d.ribeiro@inesctec.pt</li> </ul> <p>PhD Student in Electrical and Computers Engineering (ECE) at the Faculty of Engineering, University of Porto (FEUP), 4200-465 Porto, Portugal</p> <p>Researcher at the 5dpo Robotics Team, 4200-465 Porto, Portugal</p> <ul> <li>Mail: up201906264@edu.fe.up.pt</li> </ul>"},{"location":"awards/","title":"Awards","text":"<p>Best CTM Summer Internship 2022 at INESC-TEC, Porto, Portugal, July 2022</p>"},{"location":"cv/","title":"Curriculum Vitae","text":""},{"location":"cv/#experience","title":"Experience","text":"<p>INESC TEC - Institute for Systems and Computer Engineering, Technology and Science (Porto, Portugal)</p> <ul> <li>Graduate Research Scholarship (July 2023 - Present)</li> <li>Research Topics:<ul> <li>Control Systems (robot positioning control)</li> <li>Multi-robot Coordination</li> <li>Simultaneous Localisation and Mapping (SLAM)</li> </ul> </li> <li>Skills:<ul> <li>C/C++ (implementation and online execution)</li> <li>LaTeX (writing)</li> <li>Python, MATLAB, Octave (data processing and analysis, prototyping)</li> <li>Robot Operating System (ROS)</li> <li>Team Work</li> </ul> </li> <li>Supervisors:<ul> <li>Prof. Dr. Ant\u00f3nio Paulo Moreira   (amoreira@fe.up.pt)</li> <li>H\u00e9ber Miguel Sobreira, PhD   (heber.m.sobreira@inesctec.pt)</li> </ul> </li> </ul>"},{"location":"cv/#education","title":"Education","text":"<p>PhD Student in ECE @ Faculty of Engineering, University of Porto (FEUP) (Porto, Portugal)</p> <ul> <li>September 2024 - Present</li> </ul> <p>MSc in ECE @ Faculty of Engineering, University of Porto (FEUP) (Porto, Portugal)</p> <ul> <li>September 2022 - July 2024</li> <li>GPA: 17.95/20 - (3<sup>rd</sup> out of 148 students)</li> <li>MSc Thesis in Trajectory Control and Collision Avoidance for a Mobile Robot   (DOI: 10.13140/RG.2.2.18652.09609)</li> <li>Supervisors:<ul> <li>Prof. Dr. Ant\u00f3nio Paulo Moreira   (amoreira@fe.up.pt)</li> <li>H\u00e9ber Miguel Sobreira, PhD   (heber.m.sobreira@inesctec.pt)</li> </ul> </li> </ul> <p>BSc in ECE @ Faculty of Engineering, University of Porto (FEUP) (Porto, Portugal)</p> <ul> <li>September 2019 - July 2022</li> <li>GPA: 18.16/20 - (1<sup>st</sup> out of 216 students)</li> </ul> <p>Sciences and Technologies Course @ Escola Secund\u00e1ria de Pa\u00e7os de Ferreira (Pa\u00e7os de Ferreira, Porto, Portugal)</p> <ul> <li>September 2016 - July 2018</li> <li>GPA: 17.6/20.0</li> </ul>"},{"location":"cv/#projects","title":"Projects","text":"<ul> <li>GreenAuto: Green innovation for the Automotive Industry   (October 2024 - Present)<ul> <li>ID: 02/C05-i01.02/2022.PC644867037-00000013</li> <li>Research Topics:   Automatic Pallet Detection,   Long-Term Localization and Mapping with Mobile Robots,   3D LiDAR-based Simultaneous Localization and Mapping,   Multi-Robot Coordination</li> </ul> </li> <li>HfPT: Health from Portugal   (September 2024 - Present)<ul> <li>ID: 01/C05-i11/2024.PC644937233-00000047</li> <li>Research Topics:   Multi-Robot Coordination,   Task Scheduling,   Artificial Intelegence</li> </ul> </li> <li>PRODUTECH R3 (Recovery-Resilience-Reindustrialisation): Production   Technologies Cluster Mobilising Agenda for Reindustrialisation   (February 2024 - July 2024)<ul> <li>ID: 01/C05-i11/2024.PC645808870-00000067</li> <li>Research Topics:   Automatic Pallet Detection,   Remote Control of Autonomous Forklift Robots</li> </ul> </li> </ul> <p>See more in Projects.</p>"},{"location":"cv/#publications","title":"Publications","text":"<p>Ribeiro, J.D., Brilhante, M., Matos, D.M., Silva, C.A, Sobreira, H.M., &amp; Costa, P.G. (2025). Parallel Path Planning for Multi-Robot Coordination. In: 2025 IEEE International Conference on Autonomous Robot Systems and Competitions (ICARSC), pp. 78-85. DOI: 10.1109/ICARSC65809.2025.10970166.</p> <p>Lopes, M.S., Ribeiro, J.D., Moreira, A.P., Rocha, C.D., Martins, J.G., Sarmento, J.M., Carvalho, J.P., Costa, P.G., &amp; Sousa, R.B. (2025). From Competition to Classroom: A Hands-on Approach to Robotics Learning. In: 2025 IEEE International Conference on Autonomous Robot Systems and Competitions (ICARSC), pp. 170-176. DOI: 10.1109/ICARSC65809.2025.10970153.</p> <p>Ribeiro, J.D., Sobreira, H.M., &amp; Moreira, A.P. (2024). A Nonlinear Model Predictive Control Strategy for Trajectory Tracking of Omnidirectional Robots. In: 16<sup>th</sup> APCA International Conference on Automatic Control and Soft Computing (CONTROLO 2024), pp. 268-279. DOI: 10.1007/978-3-031-81724-3_25.</p> <p>See more in Publications.</p>"},{"location":"cv/#awards","title":"Awards","text":"<p>Best CTM Summer Internship 2022 at INESC-TEC, Porto, Portugal, July 2022</p> <p>See more in Awards.</p>"},{"location":"open-source/","title":"Open-Source","text":""},{"location":"open-source/#iilabs-3d-iilab-indoor-lidar-based-slam-dataset","title":"IILABS 3D: iilab Indoor LiDAR-based SLAM Dataset","text":"<p>Indoor environments present unique challenges for Simultaneous Localization and Mapping (SLAM). Existing datasets typically focus on outdoor scenarios and rely on a single LiDAR sensor, limiting the evaluation of SLAM algorithms in complex indoor settings. The IILABS 3D dataset was designed to address these limitations by providing a comprehensive, sensor-rich dataset for benchmarking 3D LiDAR-based SLAM algorithms indoors. It includes data from four different 3D LiDAR sensors (Velodyne VLP-16, Ouster OS1-64, RoboSense RS-Helios-5515, and Livox Mid-360), along with an IMU and wheel odometry, all recorded using a wheeled mobile robot in the iilab. High-precision ground-truth poses were acquired using a OptiTrack Motion Capture system. The dataset also contains calibration sequences and six benchmark trajectories, enabling reproducible and rigorous SLAM evaluations. To support the use of this dataset, a complete open-source toolkit was developed, providing scripts for data handling, metric computation (ATE, RTE, RRE), and SLAM algorithm benchmarking. Additionally, a benchmark suite was implemented to evaluate nine state-of-the-art SLAM algorithms using the dataset.</p> <p>Links:</p> <ul> <li>Website: jorgedfr/3d_lidar_slam_benchmark_at_iilab</li> <li>GitHub (Benchmark + Docs): jorgedfr/3d_lidar_slam_benchmark_at_iilab</li> <li>GitHub (Toolkit): jorgedfr/iilabs3d-toolkit</li> <li>DOI (Dataset): 10.25747/VHNJ-WM80</li> <li>DOI (Paper): TBD</li> <li>Preprint: TBD</li> </ul> <p>Citation (Dataset):</p> <p>Ribeiro, J.D., Sousa, R.B., Martins, J.G., Aguiar, A.S., Santos, F.N., &amp; Sobreira, H.M. (2025). IILABS 3D: iilab Indoor LiDAR-based SLAM Dataset. DOI: 10.25747/VHNJ-WM80.</p>"},{"location":"projects/","title":"Projects","text":""},{"location":"projects/#greenauto-green-innovation-for-the-automotive-industry","title":"GreenAuto: Green innovation for the Automotive Industry","text":"<p>(ongoing)</p> <p>The GreenAuto agenda focused in transforming the national automotive sector of Portugal, in the scope of the current transition to low emission vehicles. The agenda intended to create the technical and operational conditions for Peugeot Citro\u00ebn Autom\u00f3veis Portugal,  S.A. to start the production of a new light commercial vehicle (LCV)  in Portugal, namely a battery electric light commercial vehicle (BE-LCV), with the collaboration of the agenda promotors, including industrial and Research &amp; Innovation (R&amp;I) entities. The INESC TEC participation was in the scope of the Work Package (WP) 10 Automated logistics for the automotive industry, more specifically, in the Product, Processes, or Services (PPS) 18 - 3D navigation system for mobile robotic equipment. This PPS's partners included Flowbotic Mobile Systems, Lda, a company that designs and manufactures autonomous mobile robots.</p> <p>Link: https://transparencia.gov.pt/en/fundos-europeus/prr/beneficiarios-projetos/projeto/02/C05-i01.02/2022.PC644867037-00000013/</p>"},{"location":"projects/#hfpt-health-from-portugal","title":"HfPT: Health from Portugal","text":"<p>(ongoing)</p> <p>The HfPT agenda ... TBC</p> <p>Link: https://transparencia.gov.pt/en/fundos-europeus/prr/beneficiarios-projetos/projeto/01/C05-i11/2024.PC644937233-00000047/</p>"},{"location":"projects/#produtech-r3-recovery-resilience-reindustrialisation-production-technologies-cluster-mobilising-agenda-for-reindustrialisation","title":"PRODUTECH R3 (Recovery-Resilience-Reindustrialisation): Production Technologies Cluster Mobilising Agenda for Reindustrialisation","text":"<p>(ongoing)</p> <p>The PRODUTECH R3 agenda aimed to reduce the external dependence on technologies and solutions for productive systems in the Portugal's production sector, in order to retain in the country an increasing share of the added value generated by the production value chains. Consequently, AIMMAP and the PRODUTECH Cluster launched a comprehensive set of projects and initiatives aimed to develop the production sector and, simultaneously, contribute to the Produgal's national industry. Several R&amp;D centres from INESC TEC participated in the project. The CRIIS - Centre for Robotics in Industry and Intelligent Systems participated in the Work Packages (WP) 6, FlexibleRoboticSolutions - Intelligent, Compact and Flexible End of Line Robotic Solutions, and 9, SmartIL - Intelligent interoperable robotic intralogistics and quality control platform and solutions for industry. These WPs resulted on the demonstration of the R&amp;D results in several Product, Processes, or Services (PPS), including the collaboration the main industrial partner JPM Industry responsible for the development of the robotic intralogistics solutions.</p> <p>Link: https://transparencia.gov.pt/en/fundos-europeus/prr/beneficiarios-projetos/projeto/01/C05-i11/2024.PC645808870-00000067/</p>"},{"location":"publications/","title":"Publications","text":""},{"location":"publications/#journal-articles","title":"Journal articles","text":"<p>TBC</p>"},{"location":"publications/#conference-papers","title":"Conference papers","text":"<p>Ribeiro, J.D., Brilhante, M., Matos, D.M., Silva, C.A, Sobreira, H.M., &amp; Costa, P.G. (2025). Parallel Path Planning for Multi-Robot Coordination. In: 2025 IEEE International Conference on Autonomous Robot Systems and Competitions (ICARSC), pp. 78-85. Madeira, Portugal. [doi] [preprint]</p> <p>Lopes, M.S., Ribeiro, J.D., Moreira, A.P., Rocha, C.D., Martins, J.G., Sarmento, J.M., Carvalho, J.P., Costa, P.G., &amp; Sousa, R.B. (2025). From Competition to Classroom: A Hands-on Approach to Robotics Learning. In: 2025 IEEE International Conference on Autonomous Robot Systems and Competitions (ICARSC), pp. 170-176. Madeira, Portugal. [doi] [github] [preprint]</p> <p>Ribeiro, J.D., Sobreira, H.M., &amp; Moreira, A.P. (2024). A Nonlinear Model Predictive Control Strategy for Trajectory Tracking of Omnidirectional Robots. In: 16<sup>th</sup> APCA International Conference on Automatic Control and Soft Computing (CONTROLO 2024), pp. 268-279. Porto, Portugal. [doi] [preprint]</p>"},{"location":"publications/#conference-posters","title":"Conference posters","text":"<p>TBC</p>"},{"location":"publications/#datasets","title":"Datasets","text":"<p>Ribeiro, J.D., Sousa, R.B., Martins, J.G., Aguiar, A.S., Santos, F.N., &amp; Sobreira, H.M. (2025). IILABS 3D: iilab Indoor LiDAR-based SLAM Dataset. [doi] [github]</p>"},{"location":"publications/#theses","title":"Theses","text":"<p>Ribeiro, J.D. (2024). Trajectory Control and Collision Avoidance for a Mobile Robot. M.Sc. Thesis in Electrical and Computers Engineering (ECE) at the Faculty of Engineering, University of Porto (FEUP). [url]</p>"},{"location":"research/","title":"Researching","text":"<p>TBC</p>"},{"location":"teaching/","title":"Teaching","text":"<p>TBC</p>"},{"location":"tools/","title":"Tools","text":"<p>The main goal for the existence of this page is to have a personal record of tools used and/or still using through my life. Although I have tried to create git repositories to gather some information, sometimes it may be difficult to maintain several separate repositories of information and/or code. Thus, this page is a centralisation of knowledge gained throughout different academic and professional experiences. Hope it may be of some use for you.</p> <p>See the left-side navigation bar to see which tools I have reported in this website...</p>"},{"location":"tools/git/","title":"Git","text":""},{"location":"tools/git/#getting-started","title":"Getting Started","text":""},{"location":"tools/git/#installation","title":"Installation","text":"<pre><code>sudo apt update\nsudo apt dist-upgrade\n\nsudo apt install git\n\ngit --version\ngit --help\n</code></pre>"},{"location":"tools/git/#gui-clients","title":"GUI Clients","text":"<ul> <li>GitKraken</li> <li>Git source control in VS Code</li> </ul> <p>Note: personally, I prefer to use the Command-Line Interface (CLI) of git, to better understand how the workflow of managing git repositories work. Still, GUI clients can be of great help to visualise the Git branch tree, manage tags/submodules, while giving a more graphic perspective of the repositories' state.</p>"},{"location":"tools/git/#useful-links","title":"Useful Links","text":"<ul> <li>Git</li> <li>Pro Git book</li> <li>Git Cheat Sheet<ul> <li>GitHub</li> <li>GitLab</li> <li>Atlassian</li> <li>Note: does not matter by which git cheat sheet you follow, but either of   them are a very quick way to known the main git CLI commands and the   respective usage</li> </ul> </li> <li>Agile Git<ul> <li>How to use GitLab for Agile software development (GitLab)</li> <li>Agile Git branching strategies in 2023 (Medium)</li> <li>Learn how Git fits into an agile workflow (Atlassian)</li> </ul> </li> <li>Open Source Guides</li> <li>Tutorials<ul> <li>Git by Andr\u00e9 Restivo</li> <li>Hello World</li> <li>Getting Git Right (Atlassian)</li> <li>Interactive Learning<ul> <li>Learn Git Branching</li> <li>Visualizing Git</li> </ul> </li> </ul> </li> </ul>"},{"location":"tools/git/#version-control-system-vcs","title":"Version Control System (VCS)","text":"<ul> <li>VCS allows to:<ul> <li>Record changes made to a file(s) over time</li> <li>Revert selected files / entire project back to a previous state</li> <li>Compare changes between versions</li> <li>See who modified something</li> <li>...</li> </ul> </li> <li>Source Control Management (SCM): track modifications made to a source code   repository<ul> <li>Track all changes made to a project over time</li> <li>Detailed historical record of the project</li> </ul> </li> </ul>"},{"location":"tools/git/#local-vcs","title":"Local VCS","text":"<ul> <li>Simple database that keeps all the changes to files under revision control</li> <li>Version management of all files only within the local system (no remote   server)</li> <li>Most local VCSs store only the difference patches between files instead of   copies of each version   (then, they can recreate any file at any point in time by adding up all the   patches)</li> <li>Examples: Revision Control System (RCS),   Source Code Control System (SCCS)</li> </ul> <pre><code>flowchart TB\nsubgraph Local\n    subgraph Version Database\n    v1--&gt;v2\n    v2--&gt;v3\n    end\nv3--&gt;file\nend\n</code></pre>"},{"location":"tools/git/#centralised-vcs","title":"Centralised VCS","text":"<ul> <li>Single server that contains all the versioned files</li> <li>Users checkout a particular version of the files from the central place</li> <li>Advantages:<ul> <li>Everyone knows what everyone is doing (offers full visibility into what   code is currently worked on)</li> <li>Fine-grained control over who can do what</li> <li>Easier to administer a CVCS compared to local databases</li> </ul> </li> <li>Disadvantages:<ul> <li>Single point of failure</li> <li>Requires constant connectivity<ul> <li>If the server is down, nobody can collaborate at all or save versioned   changes</li> <li>Slow speed delays development (difficult time branching the version   tree and dealing with merge conflicts)</li> </ul> </li> <li>Backups are mandatory (if storage of the central database becomes corrupt   without any backups, entire history of the project would be lose, except   for whatever single snapshots people happen to have in their local   machines)</li> </ul> </li> <li>Examples: Concurrent Versions System (CVS),   Subversion,   Perforce</li> </ul> <pre><code>flowchart TB\nsubgraph Central VCS\n    subgraph Version Database\n    v1--&gt;v2\n    v2--&gt;v3\n    end\nend\nsubgraph Computer A\n    v3--&gt;file_in_A\nend\nsubgraph Computer B\n    v3--&gt;file_in_B\nend\n</code></pre>"},{"location":"tools/git/#distributed-vcs","title":"Distributed VCS","text":"<ul> <li>All clients fully mirror the repository, including its full history<ul> <li>If any server dies, any of the client repositories can be copied back to   the server to restore it</li> <li>Every clone is a full backup of all the data</li> </ul> </li> <li>No difference between a server and a client (but one or more computers can be   used as a central point of synchronisation)</li> <li>Allows lots of different workflows<ul> <li>Work well with having several remote repositories they can work with</li> <li>E.g., hierarchical model of repositories</li> </ul> </li> <li>Examples: Git,   Mercurial,   Bazaar,   BitKeeper,   Darcs,   Fossil</li> </ul> <pre><code>flowchart TB\nsubgraph Computer B\n    subgraph Version Database Computer B\n        cb_v1--&gt;cb_v2\n        cb_v2--&gt;cb_v3\n    end\nend\nsubgraph Computer A\n    subgraph Version Database Computer A\n        ca_v1--&gt;ca_v2\n        ca_v2--&gt;ca_v3\n    end\nend\nsubgraph Server\n    subgraph Version Database Server\n        s_v1--&gt;s_v2\n        s_v2--&gt;s_v3\n    end\nend\n</code></pre>"},{"location":"tools/git/#git-basics","title":"Git Basics","text":"<ul> <li>Snapshots, Not Differences<ul> <li>Most other VCS systems store information as a list of file-based changes   (aka, delta-based version control)</li> <li>Git thinks of its data as a series of snapshots of a miniature filesystem<ul> <li>Every time you commit, Git basically takes a picture of what all the   files look like at that moment and stores a reference to that snapshot</li> <li>In order to be efficient, Git does not store the file again if its   contents have not changed, only saves a link to the previous identical   file it has already stored</li> </ul> </li> </ul> </li> <li>Nearly Every Operation is Local<ul> <li>Browsing the repository history</li> <li>Commit changes to the repository locally, then upload them to the remote   server when possible</li> </ul> </li> <li>Data Integrity<ul> <li>Everything in Git is checksummed before it is stored using SHA-1 hashes</li> <li>Git stores everything in its database not by file name but by the hash   value / checksum of its contents</li> <li>Example: <code>c9962192f9a359d450cebab57752bdf75003a532</code>   (contents of the file <code>.git/refs/heads/main</code> that represents the current   commit of the repository)</li> </ul> </li> </ul>"},{"location":"tools/git/#git-areas","title":"Git Areas","text":"<ul> <li>Working directory: directory in the local file system that is associated   with a Git repository</li> <li>Staging area: index file, generally contained in the Git directory, that   stores information about what will go into the next commit</li> <li><code>.git</code> directory (repository) :   directory inside the working repository</li> </ul>"},{"location":"tools/git/#file-states","title":"File States","text":"<ul> <li>Untracked: files that exist in the working directory but has not been   added to the repository's database</li> <li>Modified: changed files but not yet committed to the repository's database</li> <li>Staged: modified files marked to go into the next commit snapshot</li> <li>Committed: data safely stored in the local database</li> </ul>"},{"location":"tools/git/#basic-git-workflow","title":"Basic Git Workflow","text":"<ol> <li>Checkout the project (<code>.git</code> &gt;&gt;&gt; Working directory)</li> <li>Modify the files in your work tree</li> <li>Stage just the changes you want to be part of the next commit, adding only    those changes to the staging area (Working directory &gt;&gt;&gt; Staging area)</li> <li>Commit the staged files and store the corresponding snapshot permanently to    your Git directory (Staging area &gt;&gt;&gt; <code>.git</code>)</li> </ol>"},{"location":"tools/git/#git-setup","title":"Git Setup","text":""},{"location":"tools/git/#local-configuration","title":"Local Configuration","text":"<ul> <li><code>git config</code> sets the configuration variables that control all aspects of how   Git works:<ul> <li><code>[path]/etc/gitconfig</code> (applicable to every user on the system and all   repositories)</li> <li><code>~/.gitconfig</code> or <code>~/.config/git/config</code> (values specific to the user)</li> <li><code>[repository path]/.git/config</code> (configuration specific to the local   repository)</li> <li>View all settings and where they are comming from using:   <code>git config --list --show-origin</code></li> </ul> </li> </ul> <pre><code>git config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\ngit config --global core.editor vim\ngit config --global merge.tool vimdiff\n</code></pre>"},{"location":"tools/git/#ssh-keys","title":"SSH Keys","text":"<p>Nowadays, most of Git remote servers, such as GitHub or GitLab, require SSH keys for authentication, enabling remote Git operations over SSH.</p> <pre><code>ssh-keygen -t ed25519 -C \"johndoe@exaxmple.com\" -f ~/.ssh/github  # create SSH key\neval $(ssh-agent -s)                                              # start ssh-agent\nssh-add ~/.ssh/github                                             # add SSH private key to the ssh-agent\ncat ~/.ssh/github.pub | xclip -selection clipboard                # copy the public key and add to your account\n</code></pre> <p>Usually, only one SSH key is need to use in the different Git remote servers. However, if you need to use multiple SSH keys and have problems with the authentication, you can create an SSH config file as follows:</p> <pre><code>touch ~/ssh/config &amp;&amp; vim ~/ssh/config\n</code></pre> <p>SSH client configuration file</p> <pre><code>Host GitHub github.com\n  HostName github.com\n  IdentityFile ~/.ssh/GitHub\n  User sousarbarb\n\nHost GitLab gitlab.com\n  HostName gitlab.com\n  IdentityFile ~/.ssh/GitLab\n  User sousarbarb\n\nHost GitLabINESCTEC gitlab.inesctec.pt\n  HostName gitlab.inesctec.pt\n  IdentityFile ~/.ssh/GitLabINESCTEC\n  User ricardo.b.sousa\n</code></pre> <p>See the How To Configure Custom Connection Options for your SSH Client tutorial for further information on this topic.</p>"},{"location":"tools/git/#git-local","title":"Git Local","text":""},{"location":"tools/git/#create-a-repository","title":"Create a Repository","text":"<p>This creates an empty Git repository, basically a new subdirectory named <code>.git</code> that contains all necessary files to have a Git repository.</p> <pre><code>mkdir myproject &amp;&amp; cd myproject\ngit init\ngit checkout -b main\n</code></pre>"},{"location":"tools/git/#add","title":"Add","text":"<p>Add content from the working directory into the staging area (or \"index\") for the next commit.</p> <pre><code>echo \"Hello World to Git\" &gt; README\ncat README\n\ngit status\ngit add README  # or --all flag to stage all untracked OR modified files\ngit status\n</code></pre> <p>Also, you can add directories (<code>git add doc/</code>), specific files (<code>git add README CONTRIBUTING</code>), and use wildcards (<code>git add src/*.cpp</code>).</p> <pre><code># Open and edit again the README file in several lines\nvim README\n\n# Exexcute the git add --interactive mode to stage specific patches\ngit add --patch\n</code></pre>"},{"location":"tools/git/#commit","title":"Commit","text":"<p>Make a commit, capturing a snapshot of the project's currently staged changes, while associating to the commit a log message.</p> <pre><code>git status --short\ngit commit -m \"First commit\"\n</code></pre> <p>If you use <code>git commit</code>, Git opens your local code editor set in <code>core.editor</code> configuration variable to add a short message and a longer one. Additionally, you can stage and commit modified files (that are already tracked by the Git database) automatically using <code>git commit -a -m \"&lt;log message&gt;\"</code>.</p>"},{"location":"tools/git/#history","title":"History","text":"<p>We can see by whom and when each commit was made, the commit message, and also the SHA-1 hash of each commit. Note that the author information is identified by the information set by the corresponding user with the <code>git config</code> command.</p> <pre><code>git log                   # commit history of the repository\ngit log --oneline         # simplified history\ngit log --oneline -1      # limit number of entries\ngit log -1 -p             # show the difference introduced in each commit\ngit log --stat            # see some abbreviated stats for each commit\ngit log --pretty=oneline  # prints each commit on a single line\n</code></pre>"},{"location":"tools/git/#show-changes","title":"Show Changes","text":"<p>Show changes between the working directory and the index or the repository tree.</p> <pre><code>vim README\n\ngit diff\n\ngit add README\ngit diff --staged\n</code></pre> <p>You can also see the changes between branches, between commits, among other possibilities.</p>"},{"location":"tools/git/#undoing-things","title":"Undoing Things","text":"<ul> <li>Add some files possibly forgotten from the last commit, or if the commit   message was messed up   <pre><code>git add REAME\ngit commit -m \"Update README\"\ngit add README\ngit commit --amend\n</code></pre></li> <li>Unstaging a staged file   <pre><code>git restore --staged &lt;file&gt;\ngit reset HEAD &lt;file&gt;\n</code></pre></li> <li>Unmodifying a modified file   <pre><code>git restore &lt;file&gt;\ngit checkout -- &lt;file&gt;\n</code></pre></li> </ul>"},{"location":"tools/git/#branching","title":"Branching","text":"<ul> <li>A branch in Git is simply a movable point to a commit</li> <li>Each time you commit to a branch, the pointer moves forward automatically</li> <li><code>HEAD</code> is a special pointer that always points to the current branch</li> </ul>"},{"location":"tools/git/#create-branches","title":"Create Branches","text":"<pre><code>git branch devel    # create a new devel branch\ngit branch          # list current branches\ngit checkout devel  # switch from current branch to devel\n\n# OR\ngit checkout -b devel   # create and checkout the new branch\n\ngit branch\ngit status\ngit log\n</code></pre>"},{"location":"tools/git/#deleting-branches","title":"Deleting Branches","text":"<pre><code>git branch -d devel   # only deletes the branch pointer, all commits remain\n</code></pre>"},{"location":"tools/git/#merging","title":"Merging","text":"<pre><code>git checkout main\ngit merge devel\n</code></pre> <ul> <li>Git uses two main strategies to merge branches:<ul> <li>Fast-forward merge: when there is no divergent work</li> <li>Three-way merge: when there is diverging work</li> </ul> </li> </ul>"},{"location":"tools/git/#basic-merge-conflicts","title":"Basic Merge Conflicts","text":"<p>Occasionally, the merge proccess does not go smoothly, if the same part of the same file was changed differently in the two branches that will be merged. Thus, in this specific case, Git does not create automatically a new merge commit. Instead, you may need to edit manually the conflicted file(s):</p> <pre><code>$ git status\nOn branch main\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n\n    both modified:      index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <ul> <li>File modified by Git upon the detection of a merge conflict:   <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html\n&lt;div id=\"footer\"&gt;contact : email.support@github.com&lt;/div&gt;\n=======\n&lt;div id=\"footer\"&gt;\nplease contact us at support@github.com\n&lt;/div&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html\n</code></pre></li> <li>File after solving the merge conflict:   <pre><code>&lt;div id=\"footer\"&gt;\nplease contact us at email.support@github.com\n&lt;/div&gt;\n</code></pre></li> </ul> <p>This process of solving merge conflicts can be manually done by editing the file and choosing the final version. In alternative, you can use a merge conflict tool, such as Visual Studio Code or vimdiff.</p>"},{"location":"tools/git/#final-notes","title":"Final Notes","text":"<ul> <li>Commit often<ul> <li>Each commit is a snapshot that the codebase can be reverted to</li> <li>Frequent commits offer more opportunities to revert or undo work</li> <li>Group of commits can be combined into a single commit using a rebase   to clarify the development log</li> </ul> </li> <li>Ensure that you are working with the latest version   (multiple developers, each one with its local copy of the codebase)</li> <li>Make detailed notes</li> <li>Review changes before committing   (staging area can be used to manage and review the changes before doing a   commit)</li> <li>Use branches<ul> <li>Enable multiple developers to work in parallel on separate lines of   development</li> <li>When development is completed on a branch, then can be merged into the   main line of development</li> </ul> </li> <li>Agree on a workflow<ul> <li>Most VCSs / SCMs are agnostic to the methods of contribution</li> <li>Teams must establish shared patterns of collaboration</li> </ul> </li> </ul>"},{"location":"tools/docker/","title":"Docker","text":""},{"location":"tools/docker/#installation","title":"Installation","text":"<pre><code>sudo apt update\nsudo apt dist-upgrade -y\nsudo apt install ca-certificates curl -y\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release &amp;&amp; echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\nsudo apt update\nsudo apt dist-upgrade -y\n\nsudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-doc -y\n</code></pre>"},{"location":"tools/docker/#setup","title":"Setup","text":"<pre><code>sudo groupadd docker\nsudo usermod -aG docker $USER\n</code></pre>"},{"location":"tools/docker/#hello-world","title":"Hello World","text":"<pre><code>docker run hello-world\n</code></pre>"},{"location":"tools/docker/ros/","title":"Robot Operating System (ROS) and Docker","text":""},{"location":"tools/docker/ros/#setup","title":"Setup","text":""},{"location":"tools/docker/ros/#docker-images","title":"Docker images","text":"<pre><code># ROS 1\ndocker pull osrf/ros:noetic-desktop\n\n# ROS 2\ndocker pull osrf/ros:foxy-desktop\ndocker pull osrf/ros:humble-desktop\ndocker pull osrf/ros:jazzy-desktop\n\n# List local Docker images\ndocker images\n</code></pre>"},{"location":"tools/docker/ros/#dockerfiles","title":"Dockerfiles","text":"<ul> <li> ROS 1 Noetic @ Focal</li> <li> ROS 2 Humble @ Jammy</li> </ul> <p>Example</p> <pre><code>FROM osrf/ros:humble-desktop\n\n# Set environment variables\nENV DEBIAN_FRONTEND=noninteractive\nENV ROS_DISTRO=humble\nENV USER=user\nENV HOME=/home/$USER\n\n# Install additional packages\nRUN apt-get update &amp;&amp; apt-get install -y \\\n  sudo \\\n  curl \\\n  wget \\\n  git \\\n  nano \\\n  python3-pip \\\n  python3-colcon-common-extensions \\\n  python3-rosdep \\\n  python3-vcstool \\\n  bash-completion \\\n  software-properties-common \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Create user and home directory\nRUN useradd -m -d $HOME -s /bin/bash $USER &amp;&amp; \\\n  echo \"$USER:$USER\" | chpasswd &amp;&amp; \\\n  usermod -aG sudo $USER &amp;&amp; \\\n  echo \"$USER ALL=(ALL) NOPASSWD:ALL\" &gt;&gt; /etc/sudoers\n\n# ROS\nUSER $USER\nWORKDIR $HOME\n\nRUN mkdir -p $HOME/ros_ws/src\n\nRUN echo \"source /opt/ros/$ROS_DISTRO/setup.bash\" &gt;&gt; $HOME/.bashrc &amp;&amp; \\\n    echo \"source $HOME/ros_ws/install/setup.bash\" &gt;&gt; $HOME/.bashrc\n\n# Initialize rosdep\nUSER root\nRUN rosdep init || true\nUSER $USER\nRUN rosdep update\n\n# Set working directory to home and default command\nWORKDIR $HOME\nCMD [\"/bin/bash\"]\n</code></pre>"},{"location":"tools/docker/ros/#build","title":"Build","text":"<pre><code>docker build -t &lt;name:tag&gt; -f &lt;filename&gt;.Dockerfile .\n</code></pre>"},{"location":"tools/docker/ros/#run","title":"Run","text":"<pre><code># Automatically remove the container and its anonymous volumes when it exits\ndocker run --rm -it &lt;name:tag&gt; bash\n</code></pre>"},{"location":"tools/os/","title":"Operating System (OS)","text":"<p>This guide is oriented towards Ubuntu-based Linux distributions. However, the guide may be adapted for other distributions.</p>"},{"location":"tools/os/#create-bootable-usb","title":"Create Bootable USB","text":""},{"location":"tools/os/#rufus-windows","title":"Rufus (Windows)","text":"<ol> <li>Download and install Rufus</li> <li>Download the Ubuntu image file    (https://releases.ubuntu.com/)</li> <li>Select your  USB stick for the Device option</li> <li>Select the  Ubuntu image file for the Boot selection option</li> <li>(optional) Disable quick format and/or Enable check device for bad blocks</li> <li>Press the Start button</li> </ol>"},{"location":"tools/os/#linux","title":"Linux","text":"<ol> <li>Open the Make Startup Disk application</li> <li>Download the Ubuntu image file    (https://releases.ubuntu.com/)</li> <li>Select the  Ubuntu image file for the CD-Drive/Image option</li> <li>Select your  USB stick for the Device option</li> <li>Make Startup Disk</li> </ol>"},{"location":"tools/os/#installation","title":"Installation","text":"<ol> <li> Power on or reboot your computer</li> <li>Press Del or Esc key continuously (depends on the computer    maker) to enter into BIOS menu</li> <li>BIOS Setup  Boot  Select the    USB drive as the first boot option</li> <li>Save the changes and exit the boot screen</li> <li>Select Try or Install Ubuntu</li> <li>Open the Install Ubuntu 24.04.2 LTS desktop application     </li> <li>Select the OS language     </li> <li>Choose your desired accessibility options for Ubuntu     </li> <li>Select your keyboard layout     </li> <li>(optional) Setup the Internet connection to update the installer     </li> <li>(optional) Update the OS installer if needed, and return to step 6      </li> <li>Select Interactive installation for the OS installation type     <ul> <li>Automated installation uses an YAML file for automatic Ubuntu installation   (see https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html)</li> </ul> </li> <li>Use Default selection to just install the essentials, web browser, and     basic utilities     </li> <li>Enable Download and install support for additional media formats to     install media codecs in your OS     </li> <li> <p>Select Manual installation to create and resize partitions yourself     </p> <ul> <li>Remove all pre-existing partitions in the disk device used for the OS   installation (<code>nvme0n1</code>)     </li> <li>Select the <code>nvme0n1</code> disk device for boot loader installation     </li> <li> <p>SSD partitions</p> <ul> <li> <p>512MB EFI System Partition</p> <p></p> </li> <li> <p><code>/</code> root (remaining of the disk free available size minus, e.g.,   16GB for swap area)</p> <p></p> </li> <li> <p>Swap area (~16GB)</p> <p></p> </li> </ul> </li> <li> <p>Final partition scheme</p> <p></p> </li> </ul> </li> <li> <p>Create your account and setup the computer information settings     </p> </li> <li>Select your timezone     </li> <li>Review your installation choices     </li> <li>Restart the computer when the installation finishes</li> <li>Only remove the installation medium (USB stick) when appearing     Please remove the installation medium, then press ENTER</li> </ol>"},{"location":"tools/os/#setup","title":"Setup","text":"<ol> <li>Open Settings<ul> <li>Task Bar   Settings</li> <li>Dock   Show Applications     Settings</li> </ul> </li> <li> Power<ul> <li>Power: Select Performance (high performance and power usage) mode</li> <li>Power Saving<ul> <li>Disable Dim Screen (to avoid reducing the screen brightness)</li> <li>Disable Screen Blank setting it to Never (does not turn off the   screen upon inactivity)</li> </ul> </li> <li>General: Enable Show Battery Percentage</li> </ul> </li> <li> Privacy &amp; Security<ul> <li> Screen Lock<ul> <li>Disable Blank Screen Delay setting it to Never</li> <li>Disable Automatic Screen Lock (does not lock the screen after it   blanks)</li> <li>Disable Lock Screen Notifications</li> </ul> </li> </ul> </li> <li> Multitasking<ul> <li>Workspaces: Select Fixed Number of Workspaces and set 4 workspaces</li> <li>Multi-Monitor: Select Workspaces on all displays</li> </ul> </li> <li> Appearance: Select Dark mode</li> <li> Ubuntu Desktop<ul> <li>Desktop Icons: Set Size to Small</li> <li>Dock: Set Icon Size to the minimum (occupies less space)</li> </ul> </li> <li> Keyboard<ul> <li>Keyboard Shortcuts:<ul> <li>Home folder: Super+E</li> </ul> </li> </ul> </li> </ol>"},{"location":"tools/os/#update","title":"Update","text":"<pre><code>sudo apt update\nsudo apt dist-upgrade\n</code></pre>"},{"location":"tools/os/dev/","title":"Development Environment","text":""},{"location":"tools/os/dev/#c","title":"C++","text":"<pre><code>sudo apt install build-essential gcc-doc gdb gdb-doc -y\nsudo apt install cmake cmake-doc cmake-qt-gui -y\n</code></pre> <p>Note: <code>*-doc</code> packages in Linux install additional documentation, usually, in PDF or HTML format, available in <code>/usr/share/doc/</code>.</p>"},{"location":"tools/os/dev/#doxygen","title":"Doxygen","text":"<pre><code>sudo apt install doxygen doxygen-doc doxygen-gui doxygen-latex -y\n</code></pre>"},{"location":"tools/os/dev/#terminator","title":"Terminator","text":"<pre><code>sudo apt install terminator -y\n</code></pre>"},{"location":"tools/os/dev/#visual-studio-code","title":"Visual Studio Code","text":""},{"location":"tools/os/dev/#installation","title":"Installation","text":"<ol> <li>Download  Visual Studio Code    (available at    https://code.visualstudio.com/download)</li> <li>Execute the following commands     <pre><code>cd ~/Downloads/\nsudo apt install ./code_1.101.2-1750797935_amd64.deb -y\n</code></pre></li> </ol>"},{"location":"tools/os/dev/#setup","title":"Setup","text":"<ol> <li>Open  Visual Studio Code<ul> <li>GNOME menu</li> <li>Terminal (<code>$ code</code> | <code>$ code .</code> to open the VS Code in the current   directory)</li> </ul> </li> <li> Extensions    (Ctrl+Shift+X | File  Preferences     Extensions)<ul> <li> ms-vscode.cpptools-extension-pack<ul> <li>ms-vscode.cpptools</li> <li>ms-vscode.cpptools-themes</li> <li>ms-vscode.cmake-tools</li> </ul> </li> <li> ms-python.python</li> <li> ms-python.debugpy</li> <li> ms-python.vscode-pylance</li> <li> cschlosser.doxdocgen</li> <li>  redhat.vscode-xml</li> <li> redhat.vscode-yaml</li> <li> tomoki1207.pdf</li> </ul> </li> </ol>"},{"location":"tools/os/nvidia/","title":"NVIDIA Drivers","text":""},{"location":"tools/os/nvidia/#proprietary-gpu-drivers-ppa","title":"Proprietary GPU Drivers PPA","text":"<pre><code>lspci | grep -i nvidia\n\ncat /proc/driver/nvidia/version\n\nsudo add-apt-repository ppa:graphics-drivers/ppa  # Proprietary GPU Drivers PPA\nsudo apt update\n\nsudo ubuntu-drivers list\n# OR sudo ubuntu-drivers list --gpgpu\n\nsudo ubuntu-drivers install nvidia:560\n# OR sudo ubuntu-drivers install (automatic detection, install hw best match)\n</code></pre> <p>Sources:</p> <ul> <li>https://launchpad.net/~graphics-drivers/+archive/ubuntu/ppa</li> <li>https://documentation.ubuntu.com/server/how-to/graphics/install-nvidia-drivers/</li> </ul>"},{"location":"tools/os/nvidia/#setup","title":"Setup","text":"<pre><code>nvidia-smi\nnvidia-settings   # Enable NVIDIA (Performance Mode) in PRIME Profiles\n</code></pre>"},{"location":"tools/os/remote-access/","title":"Remote Access","text":"<p>Tip</p> <p>If you want to have a remote graphical output without having a monitor connected to the SBC (AnyDesk, RustDesk, Remmina w/ VNC), use the HDMI Dummy Plug.</p>"},{"location":"tools/os/remote-access/#anydesk","title":"AnyDesk","text":"<ol> <li>Download AnyDesk (available at    https://anydesk.com/en/downloads/linux)</li> <li>Execute the following commands     <pre><code>cd ~/Downloads/\nsudo apt update\nsudo apt install ./anydesk_7.0.0-1_amd64.deb\n</code></pre></li> <li>Open AnyDesk</li> <li>(optional) Set an alias to use it for remote access instead of the    AnyDesk ID</li> <li>Open the  Menu   Settings<ul> <li> Security   Unlock<ul> <li>Enable unattended access:<ul> <li>Set a password</li> <li>Set Full Access for the permission profile</li> </ul> </li> <li>(optional) Disable Search local network for other AnyDesk clients</li> <li>(optional) Enable Exclude this device from discovery</li> </ul> </li> <li>(optional)  Display<ul> <li>Set Best performance in the quality</li> <li>Set Optimize screen usage (strecht) in view mode</li> </ul> </li> </ul> </li> </ol> <p>Tip</p> <p>If you are having problems connecting to another computer through AnyDesk, try to remove the local cache folder.</p> <pre><code>ll ~/.anydesk/\nrm -rf ~/.anydesk/\n</code></pre> <p>Warning</p> <p>AnyDesk requires both remote access endpoints to have Internet connection.</p> <p>Warning</p> <p>Some IT managers may lock the remote access through AnyDesk by disabling connections through <code>*.net.anydesk.com</code>, even if both endpoints have an Internet connection. More information in https://support.anydesk.com/knowledge/firewall.</p>"},{"location":"tools/os/remote-access/#rustdesk","title":"RustDesk","text":"<ol> <li>Download RustDesk (available at    https://github.com/rustdesk/rustdesk/releases/)</li> <li>Execute the following commands     <pre><code>cd ~/Downloads/\nsudo apt update\nsudo apt install ./rustdesk-1.4.0-x86_64.deb -y\n</code></pre></li> <li>Open RustDesk</li> <li>Open the  Menu   Settings:<ul> <li> Security   Unlock   Security Settings<ul> <li>Use permanent password</li> <li>(optional) Deny LAN discovery</li> <li>(optional) Enable direct IP access  Define   the Port (e.g., <code>21118</code>)</li> </ul> </li> <li>(optional)  Display<ul> <li>Set Scale adaptive</li> <li>Set Optimize reaction time</li> <li>Other default options<ul> <li> Show monitors in toolbar</li> <li> Enable file copy and paste</li> <li> Use all my displays for the remote session</li> </ul> </li> </ul> </li> </ul> </li> </ol> <p>Tip</p> <p>RustDesk is an open-source remote access software as an alternative to AnyDesk and similiar applications, allowing your own self-hosted servers and direct IP access to your machine.</p> <p>Warning</p> <p>Direct IP access through RustDesk remote connection is unecrypted!</p>"},{"location":"tools/os/remote-access/#remmina","title":"Remmina","text":"<p>Ubuntu 24.04.2 LTS</p> <ol> <li>Execute the following commands     <pre><code>sudo apt install remmina remmina-plugin-rdp -y\nsudo apt install xrdp -y    # server for Microsoft's Remote Desktop protocol (RDP)\n</code></pre></li> <li> <p>Open  Settings   System  Remote Desktop</p> <ul> <li>Enable Desktop Sharing</li> <li>Enable Remote Control</li> <li> <p>Generate New Password</p> <p>Warning</p> <p>Do not use your account password for remote connection, the client can see the password remotely!</p> </li> </ul> </li> <li> <p>Open Remmina on the client side</p> </li> <li>Open an RDP connection with the address <code>&lt;IP address&gt;:&lt;port: e.g., 3390&gt;</code></li> </ol> <p>...older Ubuntu versions...</p> <ol> <li>Execute the following commands     <pre><code>sudo apt install remmina remmina-plugin-vnc -y\nsudo apt install vino -y\n</code></pre></li> <li>Open  Settings   Sharing  Enable    Screen Sharing</li> <li>Open Remmina on the client side</li> <li>Open a VNC connection with the address    <code>&lt;computer name&gt;.local</code> or <code>&lt;IP address&gt;</code></li> </ol>"},{"location":"tools/os/remote-access/#secure-shell-ssh","title":"Secure Shell (SSH)","text":"<pre><code># Server Computer\nsudo apt install openssh-server\n\n# Remote access / Client Computer\nsudo apt install openssh-client\n\nssh &lt;username&gt;@&lt;IP address&gt;\n</code></pre> <p>Warning</p> <p>SSH 22 default port must be open in your network's firewall settings.</p>"},{"location":"tools/os/remote-access/#zerotier","title":"ZeroTier","text":"<ol> <li>Execute the following commands     <pre><code>curl -s 'https://raw.githubusercontent.com/zerotier/ZeroTierOne/main/doc/contact%40zerotier.com.gpg' | gpg --import &amp;&amp; if z=$(curl -s 'https://install.zerotier.com/' | gpg); then echo \"$z\" | sudo bash; fi\n\nsudo zerotier-cli info\n</code></pre></li> <li>Go to https://my.zerotier.com/  Create A Network<ul> <li>Enable Auto-Assign from Range for the IPv4 Auto-Assign</li> <li>Enable Broadcast for Multicast</li> </ul> </li> <li>Execute the following commands     <pre><code>sudo zerotier-cli join &lt;Network ID&gt;\n</code></pre></li> <li>Go to https://my.zerotier.com/  Access the network previously created     Authorize the new device</li> <li> <p>Execute the following commands     <pre><code>ifconfig  # (1)!\n</code></pre></p> <ol> <li>should appear a new network interface specific to ZeroTier with an    auto-assigned STATIC IP address</li> </ol> </li> <li> <p>Execute remote access through VNC, SSH, or another method that allows IP    direct access using the ZeroTier IP address</p> <p>Warning</p> <p>Both devices should be added in your private ZeroTier network</p> </li> </ol>"}]}